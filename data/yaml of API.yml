API:

​    Propagators API:

​        Carrier:

​            -myProp:A carrier is the medium used by `Propagator`s to read values from and write values to. Each specific `Propagator` type defines its expected carrier type, such as a string map or a byte array.

​            -initProp:

​                Inject:

​                    Context:SpanContext,Baggage

​                    Carrier:outgoing message,HTTP

​                Extract:

​                    Context:SpanContext,Baggage

​                    Carrier:incoming message,http response

​        TextMap Propagator:

​            -myProp:`TextMapPropagator` performs the injection and extraction of a cross-cutting concern value as string key/values pairs into carriers that travel in-band across process boundaries.

​            -initProp:

​                Fields:

​                    myProp:The predefined propagation fields. If your carrier is reused, you should delete the fields here before calling inject.

​                    initProp:

​                        use case:

​                            -pre-allocation of fields, systems like gRPC Metadata

​                            -a single-pass over an iterator

​                        return list be used:TextMapPropagator

​                Inject:

​                    set:

​                        -carrier:outgoing message, HTTP request

​                        -key:field

​                        -value:field

​                Extract:

​                    Keys:

​                        -carrier:HTTP request

​                    Get:

​                        -carrier:HTTP request

​                        -key:field

​        Composite Propagator:

​            -myProp:传播器可以通过组合单个注入器和抽取器来实现

​            -initProp:

​                Extract:

​                    Required arguments:

​                        -Context

​                        -carrier:propagator fields

​                        -getter:invoked for each porpagation key to get

​                Inject:

​                    Required arguments:

​                        -Context

​                        -carrier:propagator fields

​                        -setter:to set a propagation key/value pair

​        Global Propagator:

​            -myProp:为每种手指吃的传播类型获取传播器

​            -initProp:

​                get global propagator:global peopagator

​                set global propagator:propagator

​    Tracing API:
​        TracerProvider:

​            myProp:TracerProvider is the entry point of the API. It provides access to `Tracer`s.

​            initProp:

​                TracerProvider operations:

​                    Name:string

​                    Version:string

​        Context Interaction:

​            myProp:This section defines all operations within the Tracing API that interact with the Context

​            initProp:

​                Functionality:

​                    Extract the Span from a Context instance

​                    Insert the Span to a Context instance

​                    Get the currently active span from the implicit context

​                    Set the currently active span to the implicit context

​        Tracer:

​            myProp:The tracer is responsible for creating Spans.

​            initProp:

​                Tracer operations:Creat a new Span

​        SpanContext:

​            myProp:A `SpanContext` represents the portion of a `Span` which must be serialized and propagated along side of a distributed context. `SpanContext`s are immutable.

​            initProp:

​                TraceId:

​                    -Hex:32-hex-character lowercase string

​                    -Binary:16-byte array

​                SpanId:

​                    -Hex:16-hex-character lowercase string

​                    -Binary:8-byte array

​                TraceFlags:contain details about the trace. Unlike TraceState values, TraceFlags are present in all traces

​                TraceState:carries vendor-specific trace identification data, represented as a list of key-value pairs. 

​                IsValid:boolean

​                IsRemote:Boolean

​                TraceState:

​                    -Get value for a given key

​                    -Add a new key/value pair

​                    -Update an existing value for a given key

​                    -Delete a key/value pair

​        Span:

​            myProp:A Span represents a single operation within a trace. Spans can be nested to form a trace tree. Each trace contains a root span, which typically describes the entire operation and, optionally, one or more sub-spans for its sub-operations.

​            initProp:

​                Span name:string

​                Span Context:string

​                Parent span:Span, SpanContext, null

​                SpanKind:string

​                Start timestamp:time

​                End timestamp:time

​                Links to other Spans:list

​                Timestamped Events:list

​                Status

​                Attributes:sampling description

​                Span operations:

​                    -Get Context:Span Context

​                    -IsRecording:boolean

​                    -Set Attributes:key

​                    -Add Events:boolean

​                    -Set Status:boolean

​                    -UpdateName:string

​                    -End:boolean

​                    -Record Exception:boolean

​                Span lifetime:time

​        SpanKind:

​            myProp:SpanKind describes the relationship between the Span, its parents, and its children in a Trace. SpanKind describes two independent properties that benefit tracing systems during analysis.

​            initProp:

​                -SERVER:CLIENT span

​                -CLIENT:span

​                -PRODUCER:span

​                -CONSUMER:span

​                -INTERNAL:span

​    Metrics API:

​        myProp:The OpenTelemetry Metrics API supports capturing measurements about the execution of a computer program at run time. The Metrics API is designed explicitly for processing raw measurements, generally with the intent to produce continuous summaries of those measurements, efficiently and simultaneously. Hereafter, "the API" refers to the OpenTelemetry Metrics API.

​        initProp:

​            -Measurements:

​                -adding

​                -grouping

​            -Metric Instruments:

​                -Synchronicity

​                -Adding vs. Grouping

​                -Monotonicity

​            -Labels:key value

​            -Meter Interface:API

​            -Aggregations:process

​            -Time:time

​            -Metric Event Format:

​                -timestamp:implicit

​                -instrument definition:name, kind, description, unit of measure

​                -label set:keys, values

​                -value:signed integer, floating point number

​                -resources:SDK

​            -Meter provider:

​                -myProp:A concrete MeterProvider implementation can be obtained by initializing and configuring an OpenTelemetry Metrics SDK.

​                -initProp:

​                    -Obtaining a Meter:

​                        name:string

​                        version:string

​                    -Global Meter provider:

​                        Get the global MeterProvider

​                        Set the global MeterProvider