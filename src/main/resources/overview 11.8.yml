OpenTelemetry: 

  myOpenTelemetry: OpenTelemetry是一组用于检测、生成、收集、导出遥测数据（包括metrics、logs和traces）的工具、API及SDK的集合，它提供了实现云原生系统上软件可观察性的框架。

DistributedTracing: 

  myDistributedTracing: Distributed tracing是一组由单个逻辑操作触发、综合了多个应用程序组件（component）的事件。Distributed tracing包含跨进程、网络和安全边界的事件。

Trace: 

  myTrace: 一个完整的调用链路追踪，一个Trace表示了一个事物在分布式系统中的执行过程，一个Trace是由多个Span组成的一个Tree（DAG的一种），同时Trace也是整个Tree的Root。

  TraceID: byte[16]

Span: 

  mySpan: Span是一个基本工作单元，每一次远程过程调用或者数据库调用都会生成一个Span。

  lock: sync.RWMutex

  tracer: *Tracer

  spanContext: trace.SpanContext

  parentSpanID: trace.SpanID

  ended: bool

  name: string

  startTime: time.Time

  endTime: time.Time

  ststusCode: codes.Code

  statusMessage: string

  attributes: map[label.Key]label.Value

  events: []Event

  links: map[trace.SpanContext] []label.Keyvalue

  spanKind: trace.SpanKind

SpanContext: 

  TraceId: 独一无二的trace标识符，由16个随机产生的字节组成，用于将各个进程中不同trace下的span信息进行分组

  SpanId: 全局唯一的span标识符，由8个随机产生的字节组成，当传递给子span时，这个标识符将成为子span的父span id

  TraceFlags: trace的选项，用一个字节来进行表示

  SamplingBit: 表示trace是否被采样的位

  Tracestate: 在键值对列表中携带跟踪系统特定的上下文。Tracestate允许不同的供应商传播附加信息，并与他们的之前设定的id格式进行交互操作

LinksBetweenSpans: 

  myLinksBetweenSpans: 一个span可以链接到零或多个具有因果关系的span，链接也可以指向同一个trace内部的span，或是跨trace指向其他trace中的span

Metrics: 

  myMetrics: 一种聚合数值，存储空间很小，可以观察系统的状态和趋势，但对于问题定位缺乏细节展示。

CounterMetrics: 

  myCounterMetrics: 提供计数，如消息队列的信息的数量，可以上升、保持不变但不可以下降，必定为非负值，数据类型为double或long

GaugeMetrics: 

  myGaugeMetrics: 提供瞬时值，如cpu使用率、内存占用率等，可以上升也可以下降，可以为正也可以为负，数据类型为double或long

LogDataModel: 

  myLogDataModel: 定义了OpenTelemetry理解日志和事件的方式，它能够表达不同来源的日志，如应用程序日志文件、机器生成的事件、系统日志等

  Timestamp: Time when the event occurred.

  TraceId: Request trace id.

  SpanId: Request span id.

  TraceFlags: W3C trace flag.

  SeverityText: The severity text(also known as log level).

  SeverityNumber: Numerical value of the severity.

  Name: Short event identifier.

  Body: The body of the of record.

  Resource: Describes the source of the log.

  Attributes: Additional events of the event.

Baggage: 

  myBaggage: Baggage用于索引同一服务中的可观察事件，其属性由同一事务中的先前服务提供。这种机制有助于建立这些可观察事件之间的因果关系。Baggage主要用于传递OpenTelemetry具有可观察性的系统的值，这些值可以用作metrics的附加维度，或logs和traces的附加上下文。

  BaggageKey: string

  BaggageValue: string

Resources: 

  myResources: Resources捕获有关记录遥测的实体的信息。Resource可以捕获实体标识的整个层次结构。它可以描述云中的主机和特定的容器或进程中运行的应用程序。

ContextPropagation: 

  myContextPropagation: 所有OpenTelemetry的横切关注点（如metrics和traces）共享一个底层上下文机制，用于在分布式事务的整个生命周期内存储状态和访问数据。

Propagator: 

  myPropagator: 使用传播器来序列化和反序列化cross-cutting concern值。

Collector: 

  myCollector: OpenTelemetry collector是一组组件，可以从OpenTelementry或其他监控/跟踪库（Jaeger、Prometheus等）检测的进程中收集traces、metrics和其他遥测数据（例如logs），进行聚合和智能采样，并将traces和metrics导出到一个或多个监视/跟踪后端。Collector允许扩展和转换收集到的遥测数据（如添加附加属性或删除个人信息）。OpenTelemetry collector有两种主要的运行模式：Agent（与应用程序一起在本地运行的守护程序）和Collector（独立运行的服务）。

InstrumentationLibraries: 

  myInstrumentationLibraries: 为另一个库启用OpenTelemetry可观测性的库称为Instrumentation Libraries（插桩库），其能够使每个库和应用程序直接调用OpenTelemetry API，实现开箱即用。

Relation1: Trace--isComposedOf--Span

Relation2: DistributedTracing--isEqualTo--Trace

Relation3: SpanContext--isAContentOf--Span

Relation4: LinksBetweenSpans--isAContentOf--Span

Relation5: CounterMetrics--isAKindOf--Metrics

Relation6: GaugeMetrics--isAKindOf--Metrics